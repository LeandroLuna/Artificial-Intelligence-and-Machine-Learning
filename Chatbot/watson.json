{"cells":[{"cell_type":"markdown","id":"08e06c81","metadata":{"id":"08e06c81"},"source":["# CP4 - Redução de Dimensionalidade e Processamento de Linguagem Natural: Amazon Q/A\n","\n","## Instruções\n","\n","Leia atentamente as instruções:\n","\n","1) O trabalho deve ser realizado em grupo. O grupo pode ter no máximo **4 alunos**.\n","\n","2) Você deverá submeter este arquivo Jupyter Notebook com as respostas nos campos indicados. Caso ache necessário, crie células markdown para comentar suas respostas e apontamentos.\n","\n","3) Apenas um aluno submeterá no Teams. Mude o nome do arquivo para as iniciais do seu nome completo seguido do seu RM. Exemplo: HFS84100-NAC1\n","\n","4) A entrega deverá ser feita até às <font color='red'>**9h35** </font> de  <font color='red'>**06/setembro/2022** </font> na respectiva tarefa no Microsoft Teams.\n","\n","5) A pontuação de cada questão está assinalada em vermelho.\n","\n","6) O dataset usado aqui é público e pode ser consultado em https://jmcauley.ucsd.edu/data/amazon/qa/\n","\n","7) Dúvidas, pergunte para o professor.\n","\n","8) **Atenção:** a base da dados a ser usada é uma base de mundo real com grande quantidade de entradas. Além disso, vocês estarão trabalhando com técnicas de NLP que podem gerar representações com milhares de dimensões. Dependendo da escolha de algoritmo de Agrupamento, Redução de Dimensionalidade ou Classificação, o tempo de processamento e o consumo de RAM pode ser excessivo. Você deve ser capaz de resolver os problemas com os recursos computacionais que tiver disponíveis, de forma que todos os itens aqui podem ser executados, depois de codificados corretamente, em menos de 15 minutos. Se você escolher algum algoritmo que está demorando demais ou travando, troque de algoritmo!\n","\n","---------------------------------"]},{"cell_type":"markdown","id":"40975178","metadata":{"id":"40975178"},"source":["## Questão 1 - Automotive: Classificação <font color='red'>(5 pontos)</font>\n","\n","Vocês receberam dados do **Amazon question/answer data** para o domínio automotivo (arquivo qa_Automotive.json). \n","\n","Vocês devem criar um **classificador de texto**, que dada uma pergunta (**question**) desse domínio, consiga classificar qual é o tipo de pergunta (**questionType**).\n","\n","Exemplos:\n","- Para a pergunta 'What is the most useful length to get?', a classe é **'open-ended'**;\n","- Para a pergunta 'I bought the Red Extra Heavy Duty. Is that too much for a full size car?', a classe é  **'yes/no'**;\n","\n","Mostre o desempenho do seu classificador através de uma matriz de confusão e comente os resultados encontrados em uma célula markdown;\n","\n","Você deve conseguir uma **acurácia pelo menos maior ou igual a 0.87 (87%).**"]},{"cell_type":"code","execution_count":125,"id":"bfbdf84b","metadata":{"id":"bfbdf84b","executionInfo":{"status":"ok","timestamp":1662466735987,"user_tz":180,"elapsed":9,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}}},"outputs":[],"source":["# Para dados\n","import pandas as pd\n","import ast, json\n","\n","## Adicione aqui as bibliotecas que achar necessárias\n","\n","# Para criar o Bag of Words\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","# Para separar dados de treinamento e teste\n","from sklearn.model_selection import train_test_split\n","\n","# Aprendizado de Máquina Supervisionado - Classificação\n","from sklearn.svm import LinearSVC\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","\n","\n","# Métricas de desempenho para a Classificação\n","from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix, classification_report\n","\n","# Para gráficos\n","import matplotlib.pyplot as plt\n","import plotly.express as px"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3bxizRzwhY15","executionInfo":{"status":"ok","timestamp":1662466739853,"user_tz":180,"elapsed":3874,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"b2afe8ac-dbd9-485b-c238-58fcbb83372e"},"id":"3bxizRzwhY15","execution_count":126,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":127,"id":"62c3bdc1","metadata":{"id":"62c3bdc1","executionInfo":{"status":"ok","timestamp":1662466743433,"user_tz":180,"elapsed":3585,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}}},"outputs":[],"source":["## Carregando os dados\n","dados = [ast.literal_eval(line) for line in open('/content/drive/MyDrive/Colab Notebooks/NAC4/qa_Automotive.json') ]\n","dados_df = pd.DataFrame(data=dados)"]},{"cell_type":"code","execution_count":128,"id":"fad728c3","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"fad728c3","executionInfo":{"status":"ok","timestamp":1662466743434,"user_tz":180,"elapsed":26,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"1463bc9b-0e47-42b2-e2c4-edd4699cb468"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  questionType        asin    answerTime      unixTime  \\\n","0   open-ended  B000022440  Jan 29, 2013  1.359446e+09   \n","1   open-ended  B000022440  Oct 26, 2013  1.382771e+09   \n","2       yes/no  B000022440  Dec 24, 2013  1.387872e+09   \n","3       yes/no  B000022440  Jan 31, 2014  1.391155e+09   \n","4       yes/no  B000022440   Dec 1, 2014  1.417421e+09   \n","\n","                                            question  \\\n","0             What is the most useful length to get?   \n","1       Are these cables made of copper or aluminum?   \n","2  I bought the Red Extra Heavy Duty. Is that too...   \n","3           Hi, Being 20ft 4gauge how heavy is this?   \n","4                   Do these cables come with a bag?   \n","\n","                                              answer answerType  \n","0  at least 20 feet.......heres why....say you ha...        NaN  \n","1  Coleman's website does indeed say copper equiv...        NaN  \n","2  For jumper cables, you can never have \"too muc...          ?  \n","3  Not nearly heavy enough. I keep them under my ...          ?  \n","4                                                 No          N  "],"text/html":["\n","  <div id=\"df-d078f08d-2fa6-430c-913e-330e4dfc19d5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>questionType</th>\n","      <th>asin</th>\n","      <th>answerTime</th>\n","      <th>unixTime</th>\n","      <th>question</th>\n","      <th>answer</th>\n","      <th>answerType</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>open-ended</td>\n","      <td>B000022440</td>\n","      <td>Jan 29, 2013</td>\n","      <td>1.359446e+09</td>\n","      <td>What is the most useful length to get?</td>\n","      <td>at least 20 feet.......heres why....say you ha...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>open-ended</td>\n","      <td>B000022440</td>\n","      <td>Oct 26, 2013</td>\n","      <td>1.382771e+09</td>\n","      <td>Are these cables made of copper or aluminum?</td>\n","      <td>Coleman's website does indeed say copper equiv...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>yes/no</td>\n","      <td>B000022440</td>\n","      <td>Dec 24, 2013</td>\n","      <td>1.387872e+09</td>\n","      <td>I bought the Red Extra Heavy Duty. Is that too...</td>\n","      <td>For jumper cables, you can never have \"too muc...</td>\n","      <td>?</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>yes/no</td>\n","      <td>B000022440</td>\n","      <td>Jan 31, 2014</td>\n","      <td>1.391155e+09</td>\n","      <td>Hi, Being 20ft 4gauge how heavy is this?</td>\n","      <td>Not nearly heavy enough. I keep them under my ...</td>\n","      <td>?</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>yes/no</td>\n","      <td>B000022440</td>\n","      <td>Dec 1, 2014</td>\n","      <td>1.417421e+09</td>\n","      <td>Do these cables come with a bag?</td>\n","      <td>No</td>\n","      <td>N</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d078f08d-2fa6-430c-913e-330e4dfc19d5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d078f08d-2fa6-430c-913e-330e4dfc19d5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d078f08d-2fa6-430c-913e-330e4dfc19d5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":128}],"source":["dados_df.head()"]},{"cell_type":"code","execution_count":129,"id":"7a806c4b","metadata":{"id":"7a806c4b","executionInfo":{"status":"ok","timestamp":1662466743437,"user_tz":180,"elapsed":17,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}}},"outputs":[],"source":["# DICA:\n","# Separar X,Y, treino e teste // ok\n","# Criar representação de texto - BOW, TFIDF, word2vec ... ok\n","# Treinar um classificador - (vimos vários tipos no primeiro semestre... alguns não irão funcionar, por quê?) ok\n","# Testar o classificador // ok\n","# Gerar Matriz de Confusão e relatório de métricas // ok\n","# Discutir resultados... ok"]},{"cell_type":"code","execution_count":130,"id":"315a59db","metadata":{"id":"315a59db","executionInfo":{"status":"ok","timestamp":1662466743439,"user_tz":180,"elapsed":19,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}}},"outputs":[],"source":["# Adicione aqui seu código"]},{"cell_type":"code","source":["dados_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MYcrZbjRpvyE","executionInfo":{"status":"ok","timestamp":1662466743440,"user_tz":180,"elapsed":19,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"c184b267-cac1-4696-dd54-1ec4676c5f38"},"id":"MYcrZbjRpvyE","execution_count":131,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 89923 entries, 0 to 89922\n","Data columns (total 7 columns):\n"," #   Column        Non-Null Count  Dtype  \n","---  ------        --------------  -----  \n"," 0   questionType  89923 non-null  object \n"," 1   asin          89923 non-null  object \n"," 2   answerTime    89923 non-null  object \n"," 3   unixTime      85466 non-null  float64\n"," 4   question      89923 non-null  object \n"," 5   answer        89923 non-null  object \n"," 6   answerType    50857 non-null  object \n","dtypes: float64(1), object(6)\n","memory usage: 4.8+ MB\n"]}]},{"cell_type":"code","source":["dados_df = dados_df.drop(columns = ['asin', 'answerTime', 'unixTime']) # Useless columns"],"metadata":{"id":"we-MmcnWteid","executionInfo":{"status":"ok","timestamp":1662466743441,"user_tz":180,"elapsed":18,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}}},"id":"we-MmcnWteid","execution_count":132,"outputs":[]},{"cell_type":"code","source":["print(dados_df.questionType.value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XuVfFs-ap0h-","executionInfo":{"status":"ok","timestamp":1662466743442,"user_tz":180,"elapsed":18,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"7d796b60-d151-4960-953e-146d37e86a1c"},"id":"XuVfFs-ap0h-","execution_count":133,"outputs":[{"output_type":"stream","name":"stdout","text":["yes/no        50857\n","open-ended    39066\n","Name: questionType, dtype: int64\n"]}]},{"cell_type":"code","source":["X = dados_df['question']\n","y = dados_df.questionType.values\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, \n","                                                    test_size = 0.3, \n","                                                    random_state = 42)"],"metadata":{"id":"9_uew9syj-Op","executionInfo":{"status":"ok","timestamp":1662466743442,"user_tz":180,"elapsed":16,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}}},"id":"9_uew9syj-Op","execution_count":134,"outputs":[]},{"cell_type":"code","source":["cv = CountVectorizer(strip_accents='unicode', binary = 'True', max_features= 999)"],"metadata":{"id":"-Do0e9L2oMcU","executionInfo":{"status":"ok","timestamp":1662466743443,"user_tz":180,"elapsed":17,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}}},"id":"-Do0e9L2oMcU","execution_count":135,"outputs":[]},{"cell_type":"code","source":["X_train_bag = cv.fit_transform(X_train)\n","X_train_bag"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0qYJrF_CoTuD","executionInfo":{"status":"ok","timestamp":1662466745701,"user_tz":180,"elapsed":2275,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"c4fb0be1-e904-4c78-e7cb-80a9f12f214a"},"id":"0qYJrF_CoTuD","execution_count":136,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<62946x999 sparse matrix of type '<class 'numpy.int64'>'\n","\twith 606134 stored elements in Compressed Sparse Row format>"]},"metadata":{},"execution_count":136}]},{"cell_type":"code","source":["print(dados_df.questionType)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qsy1MUmrr-un","executionInfo":{"status":"ok","timestamp":1662466745702,"user_tz":180,"elapsed":11,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"2e051dba-9b1d-41fe-89e0-75642e4be99d"},"id":"Qsy1MUmrr-un","execution_count":137,"outputs":[{"output_type":"stream","name":"stdout","text":["0        open-ended\n","1        open-ended\n","2            yes/no\n","3            yes/no\n","4            yes/no\n","            ...    \n","89918        yes/no\n","89919    open-ended\n","89920        yes/no\n","89921    open-ended\n","89922    open-ended\n","Name: questionType, Length: 89923, dtype: object\n"]}]},{"cell_type":"code","source":["classificador = RandomForestClassifier(random_state=0, n_estimators=100, criterion=\"entropy\")\n","classificador.fit(X_train_bag, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7FlBs-NroZWD","executionInfo":{"status":"ok","timestamp":1662466735986,"user_tz":180,"elapsed":91964,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"5d11f41d-0846-4cff-9e30-416bc9d28893"},"id":"7FlBs-NroZWD","execution_count":124,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(criterion='entropy', random_state=0)"]},"metadata":{},"execution_count":124}]},{"cell_type":"code","source":["X_test_bag = cv.transform(X_test)\n","X_test_bag.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gwGPxxRzoi_K","executionInfo":{"status":"ok","timestamp":1662466746633,"user_tz":180,"elapsed":938,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"e3e76248-8a80-43f6-ae74-6f1623b87597"},"id":"gwGPxxRzoi_K","execution_count":138,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(26977, 999)"]},"metadata":{},"execution_count":138}]},{"cell_type":"code","source":["y_pred_bag = classificador.predict(X_test_bag)\n","y_pred_bag"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hVTErRzmomb2","executionInfo":{"status":"ok","timestamp":1662466746998,"user_tz":180,"elapsed":369,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"3a4602fc-a0ed-4732-b0d0-f24bb30a97eb"},"id":"hVTErRzmomb2","execution_count":139,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['yes/no', 'open-ended', 'yes/no', ..., 'yes/no', 'yes/no',\n","       'open-ended'], dtype=object)"]},"metadata":{},"execution_count":139}]},{"cell_type":"code","source":["cm_reglog = confusion_matrix(y_test, y_pred_bag, labels = ['open-ended','yes/no'])\n","\n","figure = plt.figure(figsize=(15, 5))\n","disp = ConfusionMatrixDisplay(confusion_matrix = cm_reglog, display_labels=['open-ended','yes/no'])\n","disp.plot(values_format='d') "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":318},"id":"_IclVe_Hop_A","executionInfo":{"status":"ok","timestamp":1662466747724,"user_tz":180,"elapsed":729,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"4fd25e4a-be28-4e29-9683-f9a413eed3fa"},"id":"_IclVe_Hop_A","execution_count":140,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f2461555f50>"]},"metadata":{},"execution_count":140},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print(classification_report(y_test, y_pred_bag))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S-zLs7l4pY8R","executionInfo":{"status":"ok","timestamp":1662466749386,"user_tz":180,"elapsed":1676,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"27d30f32-ac58-4183-c91a-5e98587bdbcd"},"id":"S-zLs7l4pY8R","execution_count":141,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","  open-ended       0.89      0.86      0.87     11642\n","      yes/no       0.89      0.92      0.91     15335\n","\n","    accuracy                           0.89     26977\n","   macro avg       0.89      0.89      0.89     26977\n","weighted avg       0.89      0.89      0.89     26977\n","\n"]}]},{"cell_type":"markdown","source":["# Conclusão:\n","\n","Utilizando p/ representação de texto a técnica de tokenização, o classificador que melhor desempenhou entre aqueles testados - 'LinearSVC', 'KNN' e 'RandomForest' - foi o 'RandomForest', com uma acurácia de 89%.\n"],"metadata":{"id":"usaWXYX4vrk2"},"id":"usaWXYX4vrk2"},{"cell_type":"markdown","id":"b97591d9","metadata":{"id":"b97591d9"},"source":["## Questão 2 - Automotive: Representação e Agrupamento <font color='red'>(5 pontos)</font>\n","\n","Crie uma figura que representa as classes separadas em um espaço bidimensional. \n","\n","Faça **três imagens**: uma colorida com o **True label** de todos os dados de teste, uma mostrando o label do seu **classificador** para os dados de teste e outra com os labels econtrados por um **algoritmo de agrupamento** da sua escolha (você pode rodar o algoritmo não supervisionado para todos os dados, mas na representação, coloque apenas os dados de teste usados na classificação).\n","\n","**DICA:** X_test.axes[0] retorna os índices das linhas usadas para compor a porção X_test, e o numpy.take(vetor,indices) pode ser usado para selecionar uma parte de um vetor através de um segundo vetor contendo os índices que se pretende selecionar. (https://numpy.org/doc/stable/reference/generated/numpy.take.html)\n","\n","Compare os resultados visualmente e numericamente através da acurácia obtida por cada um. Explique seus resultados."]},{"cell_type":"code","execution_count":142,"id":"db157886","metadata":{"id":"db157886","executionInfo":{"status":"ok","timestamp":1662466749386,"user_tz":180,"elapsed":7,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}}},"outputs":[],"source":["# DICA:\n","# Importar bibliotecas\n","# Usar algum algoritmo de agrupamento (kmeas, DBSCAN ...)\n","# Usar algum algoritmo de redução de dimensionalidade (PCA, kPCA, t-SNE...)\n","# Plotar os três gráficos\n","# Calcular a acurácia do método não supervisionado\n","# Discutir resultados"]},{"cell_type":"code","execution_count":143,"id":"83833e41","metadata":{"id":"83833e41","executionInfo":{"status":"ok","timestamp":1662466749777,"user_tz":180,"elapsed":397,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}}},"outputs":[],"source":["# Adicione aqui seu código"]},{"cell_type":"code","source":["# Geral\n","import pandas as pd  # Trabalhar com tabelas\n","import numpy as np\n","\n","# Datasets\n","from sklearn.datasets import load_iris\n","\n","# Graficos\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.tree import plot_tree \n","\n","# Aprendizado de Máquina - Redução de dimensionalidade\n","from sklearn.decomposition import PCA, KernelPCA   \n","from sklearn.manifold import TSNE,  Isomap \n","\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.feature_selection import RFE\n","from sklearn.linear_model import LogisticRegression\n","\n","# Escalonador\n","from sklearn.preprocessing import StandardScaler"],"metadata":{"id":"Wyxd8x51xTIf","executionInfo":{"status":"ok","timestamp":1662467266472,"user_tz":180,"elapsed":683,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}}},"id":"Wyxd8x51xTIf","execution_count":144,"outputs":[]},{"cell_type":"code","execution_count":145,"metadata":{"id":"3fe39cc9","colab":{"base_uri":"https://localhost:8080/","height":399},"executionInfo":{"status":"error","timestamp":1662467463255,"user_tz":180,"elapsed":3579,"user":{"displayName":"Leandro Luna","userId":"00217320943669558162"}},"outputId":"0ba81202-90e5-4c5d-a398-b5ace8a275be"},"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-145-92c59aa3418f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# 2. Realizando o escalonamento\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0msc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mX_scaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# 3. Gerando uma visualização dos dados\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    850\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    851\u001b[0m             \u001b[0;31m# fit method of arity 1 (unsupervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 852\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    853\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m             \u001b[0;31m# fit method of arity 2 (supervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    804\u001b[0m         \u001b[0;31m# Reset internal state before fitting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 806\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    807\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mpartial_fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    845\u001b[0m             \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFLOAT_DTYPES\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    846\u001b[0m             \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"allow-nan\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 847\u001b[0;31m             \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfirst_call\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    848\u001b[0m         )\n\u001b[1;32m    849\u001b[0m         \u001b[0mn_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    564\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Validation should be done on X, y or both.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    565\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 566\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    567\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    744\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"unsafe\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    745\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 746\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    747\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcomplex_warning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    748\u001b[0m                 raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   1991\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1992\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mNpDtype\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1993\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1994\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1995\u001b[0m     def __array_wrap__(\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'open-ended'"]}],"source":["# 1. Carregandos os dados\n","dados = [ast.literal_eval(line) for line in open('/content/drive/MyDrive/Colab Notebooks/NAC4/qa_Automotive.json') ]\n","dados_df = pd.DataFrame(data=dados)\n","\n","X = dados_df\n","y = dados_df.questionType\n","\n","# 2. Realizando o escalonamento\n","sc = StandardScaler()\n","X_scaled = sc.fit_transform(X)\n","\n","# 3. Gerando uma visualização dos dados"],"id":"3fe39cc9"},{"cell_type":"markdown","source":["# Conclusão:\n","Exercicio não concluido por completo devido a falta de tempo. Linha de raciocicio para resolver o exercicio: Reduzir suas dimensionalidades para clusterização, para plotagem dos gráfico bidimensional (x = question, y = questionType)"],"metadata":{"id":"WBhPmdfRyppM"},"id":"WBhPmdfRyppM"}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.5"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}